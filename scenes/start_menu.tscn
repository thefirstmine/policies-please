[gd_scene load_steps=20 format=3 uid="uid://d2p3rqb86jjqc"]

[ext_resource type="Script" uid="uid://dsh83r3ej0qex" path="res://scripts/start_menu.gd" id="1_h61rw"]
[ext_resource type="FontFile" uid="uid://tky48g22e3sq" path="res://assets/Fonts/ChixaDemiBold.ttf" id="2_fcv5n"]
[ext_resource type="ArrayMesh" uid="uid://ci86itrqsgkrg" path="res://assets/Art/WhiteHouse.obj" id="3_4v6gu"]
[ext_resource type="Shader" uid="uid://biufq2yw8nwv8" path="res://shaders/pixelate.gdshader" id="4_fcv5n"]
[ext_resource type="Texture2D" uid="uid://h01yvl7hvdv4" path="res://assets/Art/5_69.png" id="4_nxjfj"]
[ext_resource type="ArrayMesh" uid="uid://dmnybvxt3xtu0" path="res://assets/Art/Lowpoly_tree_sample.obj" id="6_4v6gu"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_v2mkm"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_ctwoq"]

[sub_resource type="Animation" id="Animation_ctwoq"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("SubViewportContainer/SubViewport/Camera3D:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(-581.011, 100, -128.562)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CanvasLayer/Start:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(100, -100)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("CanvasLayer/Credits:position")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(100, -100)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("CanvasLayer/SideBar:size")
tracks/3/interp = 2
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 648)]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("CanvasLayer/Button:position")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(50, -100)]
}

[sub_resource type="Animation" id="Animation_v2mkm"]
resource_name = "cameraEaseIn"
length = 7.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("SubViewportContainer/SubViewport/Camera3D:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 5),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(-581.011, 100, -128.562), Vector3(-581.011, -40, -128.562)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CanvasLayer/Start:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(5.53333, 6),
"transitions": PackedFloat32Array(2, 2),
"update": 0,
"values": [Vector2(50, -100), Vector2(50, 300)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("CanvasLayer/Credits:position")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(6.5, 7),
"transitions": PackedFloat32Array(2, 2),
"update": 0,
"values": [Vector2(50, -100), Vector2(50, 500)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("CanvasLayer/SideBar:size")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(5.01, 5.5),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(0, 648), Vector2(375, 648)]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("CanvasLayer/Button:position")
tracks/4/interp = 2
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(6, 6.5),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(50, -100), Vector2(50, 400)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_ppfnh"]
_data = {
&"RESET": SubResource("Animation_ctwoq"),
&"cameraEaseIn": SubResource("Animation_v2mkm")
}

[sub_resource type="PlaneMesh" id="PlaneMesh_4v6gu"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nxjfj"]
render_priority = 0
shader = ExtResource("4_fcv5n")
shader_parameter/shadows_enabled = true
shader_parameter/highlights_enabled = true
shader_parameter/shadow_strength = 0.4
shader_parameter/highlight_strength = 0.1
shader_parameter/highlight_color = Color(0.968658, 0.484007, 1, 1)
shader_parameter/shadow_color = Color(0.000369701, 0.0883902, 0.0983385, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_nxjfj"]
albedo_color = Color(0.376927, 0.195591, 1.44392e-07, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_u4qax"]
albedo_color = Color(0, 0.603922, 0.054902, 1)

[sub_resource type="Shader" id="Shader_jwbto"]
code = "shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

// Wind offset direction (x and y only)
uniform vec2 wind_offset_direction = vec2(0.5, 0.1); // Control direction of offset (x, y)
uniform float wind_speed : hint_range(0.0, 25.0) = 1.0; // Speed of the noise movement over time

// Cloud change settings
uniform bool clouds_change = true; // Whether to change the cloud layer or not
uniform float cloud_change_rate : hint_range(0.0, 5.0) = .40; // Rate at which the cloud effect changes

// Pole blending parameters
uniform float pole_blend_shape : hint_range(0.0, 2.0) = 0.05; // How much the noise affects the blend shape
uniform float pole_blend_strength : hint_range(0, 1) = 0.05; // Control blending intensity at poles
uniform float pole_blend_brightness : hint_range(0.0, 1.0) = .3;

// Horizon blending parameters - similar to pole blending
uniform float horizon_blend_shape : hint_range(0.0, 2.0) = 0.05; // How much the noise affects the horizon blend shape
uniform float horizon_blend_strength : hint_range(0, 1) = 0.05; // Control blending intensity at horizon
uniform float horizon_blend_brightness : hint_range(0.0, 1.0) = .3;
uniform float horizon_blend_width : hint_range(0.0, 0.5) = 0.1; // Width of the horizon blend region

void sky() {
    float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
    float c = (1.0 - v_angle / (PI * 0.5));
    vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
    sky *= sky_energy;

    if (LIGHT0_ENABLED) {
        float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
        if (sun_angle < LIGHT0_SIZE) {
            sky = LIGHT0_COLOR * LIGHT0_ENERGY;
        } else if (sun_angle < sun_angle_max) {
            float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
            sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
        }
    }

    if (LIGHT1_ENABLED) {
        float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
        if (sun_angle < LIGHT1_SIZE) {
            sky = LIGHT1_COLOR * LIGHT1_ENERGY;
        } else if (sun_angle < sun_angle_max) {
            float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
            sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
        }
    }

    if (LIGHT2_ENABLED) {
        float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
        if (sun_angle < LIGHT2_SIZE) {
            sky = LIGHT2_COLOR * LIGHT2_ENERGY;
        } else if (sun_angle < sun_angle_max) {
            float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
            sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
        }
    }

    if (LIGHT3_ENABLED) {
        float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
        if (sun_angle < LIGHT3_SIZE) {
            sky = LIGHT3_COLOR * LIGHT3_ENERGY;
        } else if (sun_angle < sun_angle_max) {
            float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
            sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
        }
    }

    // Sample the sky cover texture with dynamic offset (only x and y direction)
    vec2 noise_coords = SKY_COORDS.xy + wind_offset_direction * wind_speed * TIME * 0.01;

    // Wrap UVs to keep tiling seamless
    noise_coords = mod(noise_coords, 1.0);

    // Sample the original noise texture
    vec4 sky_cover_texture = texture(sky_cover, noise_coords);

    // Sample flipped noise for Z-offset effect
    vec4 flipped_noise = texture(sky_cover, vec2(noise_coords.x, 1.0 - noise_coords.y));

    // Z blending (cloud change) logic
    float cloud_blend_factor = 0.0;
    if (clouds_change) {
        // Use a sine wave to blend clouds smoothly over time based on the cloud_change_rate
        cloud_blend_factor = 0.5 + 0.5 * sin(TIME * cloud_change_rate);
    }

    // Blend between the original and flipped noise using cloud_blend_factor
    vec4 blended_noise_texture = mix(sky_cover_texture, flipped_noise, cloud_blend_factor);

    // Pole blending
    float base_pole_blend_factor = abs(EYEDIR.y);  // Original blend factor (circular)
    float noise_pole_blend = blended_noise_texture.r * pole_blend_shape;
    float pole_blend_factor = smoothstep(1.0 - pole_blend_strength, 1.0, base_pole_blend_factor + noise_pole_blend);
    
    // Horizon blending - detect when we're near the horizon
    float horizon_distance = abs(EYEDIR.y);  // This will be close to 0 near the horizon
    float horizon_factor = 1.0 - smoothstep(0.0, horizon_blend_width, horizon_distance);
    float noise_horizon_blend = blended_noise_texture.g * horizon_blend_shape;
    float horizon_blend_factor = smoothstep(1.0 - horizon_blend_strength, 1.0, horizon_factor + noise_horizon_blend);
    
    // Combine both blend factors (poles and horizon)
    float combined_blend_factor = max(pole_blend_factor, horizon_blend_factor);
    
    // Blend noise with brightness value based on the combined factor
    vec3 blended_noise = mix(blended_noise_texture.rgb, vec3(pole_blend_brightness), pole_blend_factor);
    blended_noise = mix(blended_noise, vec3(horizon_blend_brightness), horizon_blend_factor);

    sky += (blended_noise * sky_cover_modulate.rgb) * blended_noise_texture.a * sky_cover_modulate.a * sky_energy;

    // Ground blending
    c = (v_angle - (PI * 0.5)) / (PI * 0.5);
    vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
    ground *= ground_energy;

    COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ia0g5"]
shader = SubResource("Shader_jwbto")
shader_parameter/sky_top_color = Color(0.385, 0.454, 0.55, 1)
shader_parameter/sky_horizon_color = Color(0.880075, 0.55375, 0.531062, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover = ExtResource("4_nxjfj")
shader_parameter/sky_cover_modulate = Color(0.619751, 0.833648, 1, 1)
shader_parameter/ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
shader_parameter/ground_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 6.28319
shader_parameter/sun_curve = 0.15
shader_parameter/exposure = 1.0
shader_parameter/wind_offset_direction = Vector2(0.5, 0.1)
shader_parameter/wind_speed = 1.0
shader_parameter/clouds_change = true
shader_parameter/cloud_change_rate = 0.4
shader_parameter/pole_blend_shape = 0.05
shader_parameter/pole_blend_strength = 0.05
shader_parameter/pole_blend_brightness = 0.3
shader_parameter/horizon_blend_shape = 0.05
shader_parameter/horizon_blend_strength = 0.05
shader_parameter/horizon_blend_brightness = 0.3
shader_parameter/horizon_blend_width = 0.1

[sub_resource type="Sky" id="Sky_ia0g5"]
sky_material = SubResource("ShaderMaterial_ia0g5")
radiance_size = 1

[sub_resource type="Environment" id="Environment_v2mkm"]
background_mode = 2
sky = SubResource("Sky_ia0g5")
fog_enabled = true
fog_mode = 1
fog_light_color = Color(0, 0, 0, 1)
fog_density = 0.6076
fog_sky_affect = 0.0
fog_depth_curve = 4.59479
fog_depth_end = 661.2
volumetric_fog_enabled = true
volumetric_fog_density = 0.01
volumetric_fog_albedo = Color(0.156443, 0.163538, 0.216364, 1)
adjustment_saturation = 8.0

[node name="StartMenu" type="Node3D"]
script = ExtResource("1_h61rw")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Background" type="ColorRect" parent="CanvasLayer"]
modulate = Color(1, 1, 1, 0.156863)
offset_right = 1152.0
offset_bottom = 655.0
color = Color(0, 0, 0, 1)

[node name="SideBar" type="ColorRect" parent="CanvasLayer"]
anchors_preset = 9
anchor_bottom = 1.0
grow_vertical = 2
color = Color(0, 0, 0, 0.470588)

[node name="Start" type="Button" parent="CanvasLayer"]
offset_left = 100.0
offset_top = -100.0
offset_right = 300.0
offset_bottom = -27.0
theme_override_fonts/font = ExtResource("2_fcv5n")
theme_override_font_sizes/font_size = 64
theme_override_styles/normal = SubResource("StyleBoxEmpty_v2mkm")
text = "[Start]"

[node name="Credits" type="Button" parent="CanvasLayer"]
offset_left = 100.0
offset_top = -100.0
offset_right = 364.0
offset_bottom = -27.0
theme_override_fonts/font = ExtResource("2_fcv5n")
theme_override_font_sizes/font_size = 64
theme_override_styles/normal = SubResource("StyleBoxEmpty_ctwoq")
text = "[Credits]"

[node name="Button" type="Button" parent="CanvasLayer"]
offset_left = 50.0
offset_top = -100.0
offset_right = 329.0
offset_bottom = -35.0
theme_override_fonts/font = ExtResource("2_fcv5n")
theme_override_font_sizes/font_size = 64
theme_override_styles/normal = SubResource("StyleBoxEmpty_ctwoq")
text = "[Tutorial]"

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
&"": SubResource("AnimationLibrary_ppfnh")
}

[node name="MenuMusic" type="AudioStreamPlayer" parent="."]
volume_db = -25.0

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
texture_filter = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true
stretch_shrink = 4

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
handle_input_locally = false
size = Vector2i(288, 162)
render_target_update_mode = 4

[node name="WhiteHouse" type="MeshInstance3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.443356, 0, 2.34751)
mesh = ExtResource("3_4v6gu")
skeleton = NodePath("../../..")

[node name="Camera3D" type="Camera3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(-0.180519, -0.349273, -0.919468, 0, 0.934826, -0.355107, 0.983571, -0.0641036, -0.168754, -581.011, 100, -128.562)
fov = 37.7

[node name="MeshInstance3D" type="MeshInstance3D" parent="SubViewportContainer/SubViewport/Camera3D"]
transform = Transform3D(18.9184, 27.4237, -87.7053, -77.2266, 53.2751, 0, 49.8029, 72.1935, 33.3161, -1.246, -29.485, -6.345)
mesh = SubResource("PlaneMesh_4v6gu")
surface_material_override/0 = SubResource("ShaderMaterial_nxjfj")

[node name="OmniLight3D" type="OmniLight3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -526.158, 17.3713, -32.1222)
light_color = Color(1, 0.580392, 0.482353, 1)
light_energy = 150.0
shadow_enabled = true
omni_range = 4096.0

[node name="LowpolyTreeSample" type="MeshInstance3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(15, 0, 0, 0, 15, 0, 0, 0, 15, 479.603, -140.24, -552.701)
mesh = ExtResource("6_4v6gu")
skeleton = NodePath("../LowpolyTreeSample2")
surface_material_override/0 = SubResource("StandardMaterial3D_nxjfj")
surface_material_override/1 = SubResource("StandardMaterial3D_u4qax")

[node name="LowpolyTreeSample2" type="MeshInstance3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(10, 0, 0, 0, 10, 0, 0, 0, 10, 360.317, 16.0627, 489.929)
mesh = ExtResource("6_4v6gu")
skeleton = NodePath("../../..")
surface_material_override/0 = SubResource("StandardMaterial3D_nxjfj")
surface_material_override/1 = SubResource("StandardMaterial3D_u4qax")

[node name="LowpolyTreeSample3" type="MeshInstance3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(18.23, 0, 0, 0, 18.23, 0, 0, 0, 18.23, 1216.67, -74.1856, -353.21)
mesh = ExtResource("6_4v6gu")
skeleton = NodePath("../LowpolyTreeSample2")
surface_material_override/0 = SubResource("StandardMaterial3D_nxjfj")
surface_material_override/1 = SubResource("StandardMaterial3D_u4qax")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_v2mkm")

[node name="SFX" type="AudioStreamPlayer" parent="."]
volume_db = -25.0
pitch_scale = 0.8

[connection signal="mouse_entered" from="CanvasLayer/Start" to="." method="_on_start_mouse_entered"]
[connection signal="pressed" from="CanvasLayer/Start" to="." method="_on_start_pressed"]
[connection signal="mouse_entered" from="CanvasLayer/Credits" to="." method="_on_credits_mouse_entered"]
[connection signal="pressed" from="CanvasLayer/Credits" to="." method="_on_credits_pressed"]
[connection signal="mouse_entered" from="CanvasLayer/Button" to="." method="_on_tutorial_mouse_entered"]
[connection signal="pressed" from="CanvasLayer/Button" to="." method="_on_tutorial_pressed"]
[connection signal="finished" from="MenuMusic" to="." method="_on_menu_music_finished"]
